#Kage Library
#$lib_ver$:0.0.45
#   . $(dirname $0)/klib.so
#_k_ver(){
#}
#_k_ver_close(){
#}

_k_ver_help() {
   echo "version check/control library"
}

_k_loaded_ver(){
   local null
}

###############
#higher_char version
# 2012/05/31
# src < dest : shell true ( return 0 )  / echo 1
# src >= dest : shell false ( return 1 ) / echo 0 
_k_ver_higher_char() {
   local a b a_num b_num num j
   a=$1
   b=$2
   if is_num $a >& /dev/null ; then
       if echo $b | grep -e alpha -e beta >& /dev/null; then
           echo 0
           return 1
       fi
   fi
   if is_num $b >& /dev/null ; then
       if echo $a | grep -e alpha -e beta >& /dev/null; then
           echo 1
           return 0
       fi
   fi
   if echo $a | grep alpha >& /dev/null ; then
       a=$(echo $a | sed "s/alpha/a/g")
   elif echo $a | grep beta >& /dev/null ; then
       a=$(echo $a | sed "s/beta/b/g")
   elif echo $a | grep rc >& /dev/null ; then
       a=$(echo $a | sed "s/rc/r/g")
   fi
   if echo $b | grep alpha >& /dev/null ; then
       b=$(echo $b | sed "s/alpha/a/g")
   elif echo $b | grep beta >& /dev/null ; then
       b=$(echo $b | sed "s/beta/b/g")
   elif echo $b | grep rc >& /dev/null ; then
       b=$(echo $b | sed "s/rc/r/g")
   fi
   a_num=${#a}
   b_num=${#b}
   num=$( (( $a_num > $b_num )) && echo $a_num ||  echo $b_num )
   for (( j=1; j <= $num ; j++ )); do
       echo "$(echo $a | cut -c $j) > $(printf "%u" "'$(echo $a | cut -c $j) ") : $(echo $b | cut -c $j) > $(printf "%u" "'$(echo $b | cut -c $j) ")"

       if (( $(printf "%u" "'$(echo $a | cut -c $j)") < $(printf "%u" "'$(echo $b | cut -c $j)") )); then
           echo 1
           return 0
       elif (( $(printf "%u" "'$(echo $a | cut -c $j)") > $(printf "%u" "'$(echo $b | cut -c $j)") )); then
           echo 0
           return 1
       fi
   done

   echo 0
   return 1
}


################
#_k_ver_higher
# 2011/10/20
# modify 2012/05/31 for version included char
# src < dest : shell true ( return 0 )  / echo 1
# src >= dest : shell false ( return 1 ) / echo 0 
_k_ver_higher_v1() {
    local src dest ord_max src_num dest_num
    src=$1
    dest=$2
    [ -n "$src" ] || error_exit "_k_ver_higher <src> <dest>"
    [ -n "$dest" ] || error_exit "_k_ver_higher <src> <dest>"

    src_ver_arr=( $(echo $src | sed 's/[+./_\-]/ /g') )
    dest_ver_arr=( $(echo $dest | sed 's/[+./_\-]/ /g') )
    (( ${#src_ver_arr[*]} < ${#dest_ver_arr[*]} )) && ord_max=$((${#dest_ver_arr[*]}-1)) || ord_max=$((${#src_ver_arr[*]}-1))
    for i in $( seq 0 $ord_max ); do
        [ -n "${src_ver_arr[$i]}" ] && src_num=${src_ver_arr[$i]} || src_num=0
        [ -n "${dest_ver_arr[$i]}" ] && dest_num=${dest_ver_arr[$i]} || dest_num=0
        if [ "$(is_num $src_num)" == "1" -a "$(is_num $dest_num)" == "1" ]; then
            if (( $src_num > $dest_num )); then
                echo 0
                return 1
            elif (( $src_num < $dest_num )); then
                echo 1
                return 0
            fi
        else
          if _k_ver_higher_char $src_num $dest_num >/dev/null ; then
            echo 1
            return 0
          else
            echo 0
            return 1
          fi
        fi
    done
    echo 0
    return 1
}

# 2013/05/24 for version included char
# find < value : return true (0)
# find > value : return false (1)
# find = value : return 2
_k_ver_higher() {
    local find source
    find=$1
    source=$2
    [ -n "$find" ] || error_exit "${FUNCNAME} <src> <dest>"
    [ -n "$source" ] || error_exit "${FUNCNAME} <src> <dest>"

    find_arr=( $(echo $find | sed 's/[+./_\-]/ /g') )
    source_arr=( $(echo $source | sed 's/[+./_\-]/ /g') )
    if (( ${#find_arr[*]} > ${#source_arr[*]}  )); then
       find_num=${#source_arr[*]}
       leng=1
    else
       find_num=${#find_arr[*]}
       (( ${#find_arr[*]} == ${#source_arr[*]}  )) && leng=0 || leng=2
    fi

    for ((ii=0; ii<$find_num; ii++)); do
        if (( ${find_arr[$ii]} > ${source_arr[$ii]} )); then
           return 0
        elif (( ${find_arr[$ii]} == ${source_arr[$ii]} )); then
           continue
        elif (( ${find_arr[$ii]} < ${source_arr[$ii]} )); then
           return 1
        fi
    done

    if (( $leng > 0 )); then
       (( $leng > 1 )) && return 1 || return 0
    else
       return 2
    fi
}

#2011/10/20
#2012/02/03
# chk_version <start> <end> <find>
_k_ver_check_v1() {
  local start end find schk echk sf_ver sl_ver ef_ver el_ver ff_ver fl_ver
  start=$1
  end=$2
  find=$3
  if [ "$start" == "-" -a "$end" == "-" ]; then
     echo 1
  elif [ "$start" == "-" ]; then
     if [ "$end" == "$find" ]; then
         echo 1
     else
         _k_ver_higher_v1 $end $find >/dev/null  && echo 0 || echo 1
     fi
  elif [ "$end" == "-" ]; then
     if [ "$start" == "$find" ]; then
         echo 1
     else
         _k_ver_higher_v1 $start $find >/dev/null && echo 1 || echo 0
     fi
  else
     if [ "$start" == "$find" ]; then
         _k_ver_higher_v1 $end $find >/dev/null && echo 0 || echo 1
     else
         if _k_ver_higher_v1 $start $find >/dev/null ; then
             _k_ver_higher_v1 $end $find >/dev/null && echo 0 || echo 1
         fi
     fi
  fi
}

_k_ver_check() {
  local start end find chk aa
  start=$1
  end=$2
  find=$3

  if [ "$start" == "-" -a "$end" == "-" ]; then
     return 0
  elif [ "$start" == "-" ]; then
     if [ "$end" == "$find" ]; then
         return 0
     else
         _k_ver_higher $find $end && return 1 || return 0
     fi
  elif [ "$end" == "-" ]; then
     if [ "$start" == "$find" ]; then
         return 0
     else
         _k_ver_higher $find $start && return 0 || return 1
     fi
  elif [ "$start" == "$find" -o "$end" == "$find" ]; then
     return 0
  else
     if _k_ver_higher $find $start; then
         chk=0 
     else
        aa=$?
        (( $aa==2 )) && chk=0 || return 1 
     fi
     if [ "$chk" == "0" ]; then
         _k_ver_higher $find $end && return 1 || return 0
     fi
  fi
}
